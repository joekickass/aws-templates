AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example API stack


Parameters:

  Milieu:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - prod

  ApiKey:
    Type: String
    Default: 0123-4567-8901234567-8901

Resources:
  # http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html#api-gateway-proxy-resource
  ExampleApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Milieu
      DefinitionBody:
        swagger: 2.0
        info:
          title: ExampleAPI
          version: 1.1
        schemes:
          - https
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                responses:
                  default:
                    statusCode: 200
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
                credentials: !GetAtt ApiGwRole.Arn
                passthroughBehavior: when_no_match
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: #/definitions/Empty
              security:
                - Authorizer: []
        securityDefinitions:
          Authorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              type: token
              authorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations'
              authorizerCredentials: !GetAtt ApiGwRole.Arn
              authorizerResultTtlInSeconds: 1
        definitions:
          Empty:
            type: object
            title: Empty Schema

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ../src/app
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ExampleApi
            Path: /
            Method: GET

  AuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ../src/auth
      Role: !GetAtt AuthLambdaRole.Arn
      Events:
        AuthEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ExampleApi
            Path: /
            Method: GET
      Environment:
        Variables:
          # Example variable, not used in authorizer...
          AUTH_API_KEY: !Ref ApiKey

  ApiGwRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: invoke-lambdas
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt AuthLambda.Arn
                  - !GetAtt LambdaFunction.Arn

  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroups
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'


Outputs:

  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - 'https://'
        - !Ref ExampleApi
        - '.execute-api.'
        - !Ref AWS::Region
        - '.amazonaws.com/'
        - !Ref Milieu
